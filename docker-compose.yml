version: '3.8'

services:
  postgres_auth:
    image: postgres:13.0-alpine
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_auth:/var/lib/postgresql/data

  redis_auth:
    image: redis:6.2-alpine
    restart: always
    volumes:
      - redis_auth:/data
    command:
      - sh
      - -c
      - redis-server --appendonly yes --maxmemory 450000000 --maxmemory-policy volatile-lru
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 512M

  auth_flask:
    build:
      context: ./auth_flask_app
    restart: on-failure
    env_file:
      - docker.env
      - .env
    volumes:
      - ./auth_flask_app:/auth_flask_app
    depends_on:
      - postgres_auth
      - redis_auth
    command: gunicorn --bind 0.0.0.0:5000 wsgi_app:app

  nginx:
    hostname: nginx_auth
    image: nginx:latest
    volumes:
      - static_volume:/data/static/:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "50:80"
    depends_on:
      - auth_flask
    networks:
      - default
      - auth_network

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - ${JAEGER_UDP}:${JAEGER_UDP}/udp
      - ${JAEGER}:${JAEGER}
    depends_on:
      - nginx

volumes:
  postgres_auth:
  redis_auth:
  static_volume:

networks:
  auth_network:
    external: true
